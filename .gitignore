
# Created by https://www.toptal.com/developers/gitignore/api/python,django
# Edit at https://www.toptal.com/developers/gitignore?templates=python,django
.DS_Store
.idea/

### Django ###
*.log
*.pot
*.pyc
__pycache__/
local_settings.py
db.sqlite3
db.sqlite3-journal
media

# If your build process includes running collectstatic, then you probably don't need or want to include staticfiles/
# in your Git repository. Update and uncomment the following line accordingly.
# <django-project-name>/staticfiles/

### Django.Python Stack ###
# Byte-compiled / optimized / DLL files
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo

# Django stuff:

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintainted in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

### Python ###
# Byte-compiled / optimized / DLL files

# C extensions

# Distribution / packaging

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.

# Installer logs

# Unit test / coverage reports

# Translations

# Django stuff:

# Flask stuff:

# Scrapy stuff:

# Sphinx documentation

# PyBuilder

# Jupyter Notebook

# IPython

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control

# PEP 582; used by e.g. github.com/David-OConnor/pyflow

# Celery stuff

# SageMath parsed files

# Environments

# Spyder project settings

# Rope project settings

# mkdocs documentation

# mypy

# Pyre type checker

# pytype static type analyzer

# Cython debug symbols

# PyCharm
#  JetBrains specific template is maintainted in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.

# End of https://www.toptal.com/developers/gitignore/api/python,django
# https://www.toptal.com/developers/gitignore/api/python,django দ্বারা তৈরি # https://www.toptal.com/developers/gitignore?templates=python,django এ সম্পাদনা করুন ### জ্যাঙ্গো ### *.লগ *.পাত্র *.pyc __পাইক্যাশে__/ local_settings.py db.sqlite3 db.sqlite3-জার্নাল মিডিয়া # যদি আপনার বিল্ড প্রক্রিয়ায় চলমান কালেকস্ট্যাটিক অন্তর্ভুক্ত থাকে, তাহলে আপনার সম্ভবত স্ট্যাটিকফাইলগুলি অন্তর্ভুক্ত করার প্রয়োজন নেই বা চান না # আপনার গিট সংগ্রহস্থলে। সেই অনুযায়ী নিম্নলিখিত লাইনটি আপডেট করুন এবং মন্তব্য করুন। # <django-project-name>/staticfiles/ ### জ্যাঙ্গো।পাইথন স্ট্যাক ### # বাইট-সংকলিত / অপ্টিমাইজ করা / DLL ফাইল *.py[cod] *$py.class # সি এক্সটেনশন * তাই # বিতরণ / প্যাকেজিং .পাইথন নির্মাণ/ বিকাশ-ডিম/ dist/ ডাউনলোড/ ডিম/ ডিম/ lib/ lib64/ অংশ/ sdist/ var/ চাকা/ শেয়ার/পাইথন-হুইলস/ *.degg-info/ .installed.cfg *.ডিম ম্যানিফেস্ট # পাইইনস্টলার # সাধারণত এই ফাইলগুলি একটি টেমপ্লেট থেকে পাইথন স্ক্রিপ্ট দ্বারা লেখা হয় # PyInstaller exe তৈরি করার আগে, যাতে এটিতে তারিখ/অন্যান্য তথ্য ইনজেক্ট করা যায়। *.প্রকাশ *.বিশেষ # ইনস্টলার লগ pip-log.txt pip-delete-this-directory.txt # ইউনিট পরীক্ষা / কভারেজ রিপোর্ট htmlcov/ .tox/ .nox/ .কভারেজ .কভারেজ।* ক্যাশে nosetests.xml coverage.xml *.আবরণ *.py, কভার অনুমান/ .pytest_cache/ আবরণ/ #অনুবাদ *.মা # জ্যাঙ্গো জিনিস: # ফ্লাস্ক স্টাফ: দৃষ্টান্ত/ .webassets-cache # নোংরা জিনিস: .স্ক্র্যাপি # স্ফিংক্স ডকুমেন্টেশন ডক্স/_বিল্ড/ # পাইবিল্ডার .pybuilder/ লক্ষ্য/ # জুপিটার নোটবুক .ipynb_checkpoints # আইপিথন প্রোফাইল_ডিফল্ট/ ipython_config.py # পাইনভ # একটি লাইব্রেরি বা প্যাকেজের জন্য, আপনি এই ফাইলগুলিকে উপেক্ষা করতে চাইতে পারেন যেহেতু কোডটি রয়েছে৷ # একাধিক পরিবেশে চালানোর উদ্দেশ্যে; অন্যথায়, তাদের চেক ইন করুন: # পাইথন-সংস্করণ # পাইপেনভি # pypa/pipenv#598 অনুসারে, সংস্করণ নিয়ন্ত্রণে Pipfile.lock অন্তর্ভুক্ত করার পরামর্শ দেওয়া হচ্ছে। # তবে, সহযোগিতার ক্ষেত্রে, যদি প্ল্যাটফর্ম-নির্দিষ্ট নির্ভরতা বা নির্ভরতা থাকে # কোন ক্রস-প্ল্যাটফর্ম সমর্থন না থাকায়, pipenv নির্ভরশীলতা ইনস্টল করতে পারে যা কাজ করে না বা না # সমস্ত প্রয়োজনীয় নির্ভরতা ইনস্টল করুন। #Pipfile.lock #কবিতা # Pipfile.lock-এর মতই, সাধারণত কবিতা.লক সংস্করণ নিয়ন্ত্রণে অন্তর্ভুক্ত করার পরামর্শ দেওয়া হয়। # এটি বিশেষ করে বাইনারি প্যাকেজগুলির জন্য প্রজননযোগ্যতা নিশ্চিত করার জন্য সুপারিশ করা হয় এবং আরও বেশি # লাইব্রেরির জন্য সাধারণত উপেক্ষা করা হয়। # https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control #poetry.lock # PEP 582; যেমন দ্বারা ব্যবহৃত github.com/David-OConnor/pyflow __পাইপ্যাকেজ__/ # সেলারি জিনিস celerybeat-সূচি celerybeat.pid # SageMath পার্স করা ফাইল *.sage.py # পরিবেশ .env .venv env/ venv/ ENV/ env.bak/ venv.bak/ # স্পাইডার প্রকল্প সেটিংস .spyderproject .spyproject # দড়ি প্রকল্প সেটিংস .ropeproject # mkdocs ডকুমেন্টেশন /সাইট # mypy .mypy_cache/ .dmypy.json dmypy.json # পাইরে টাইপ চেকার .pyre/ # পাইটাইপ স্ট্যাটিক টাইপ বিশ্লেষক .pytype/ # সাইথন ডিবাগ চিহ্ন cython_debug/ # পাইচর্ম # JetBrains নির্দিষ্ট টেমপ্লেট একটি পৃথক JetBrains.gitignore এ বজায় রাখা হয় যা করতে পারে # https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore এ পাওয়া যাবে # এবং গ্লোবাল gitignore এ যোগ করা যেতে পারে বা এই ফাইলে মার্জ করা যায়। আরো একটি পারমাণবিক জন্য # বিকল্প (প্রস্তাবিত নয়) আপনি সম্পূর্ণ ধারণা ফোল্ডার উপেক্ষা করতে নিম্নলিখিত মন্তব্য করতে পারেন। #.ধারণা/ ### পাইথন ### # বাইট-সংকলিত / অপ্টিমাইজ করা / DLL ফাইল # সি এক্সটেনশন # বিতরণ / প্যাকেজিং # পাইইনস্টলার # সাধারণত এই ফাইলগুলি একটি টেমপ্লেট থেকে পাইথন স্ক্রিপ্ট দ্বারা লেখা হয় # PyInstaller exe তৈরি করার আগে, যাতে এটিতে তারিখ/অন্যান্য তথ্য ইনজেক্ট করা যায়। # ইনস্টলার লগ # ইউনিট পরীক্ষা / কভারেজ রিপোর্ট #অনুবাদ # জ্যাঙ্গো জিনিস: # ফ্লাস্ক স্টাফ: # নোংরা জিনিস: # স্ফিংক্স ডকুমেন্টেশন # পাইবিল্ডার # জুপিটার নোটবুক # আইপিথন # পাইনভ # একটি লাইব্রেরি বা প্যাকেজের জন্য, আপনি এই ফাইলগুলিকে উপেক্ষা করতে চাইতে পারেন যেহেতু কোডটি রয়েছে৷ # একাধিক পরিবেশে চালানোর উদ্দেশ্যে; অন্যথায়, তাদের চেক ইন করুন: # পাইথন-সংস্করণ # পাইপেনভি # pypa/pipenv#598 অনুসারে, সংস্করণ নিয়ন্ত্রণে Pipfile.lock অন্তর্ভুক্ত করার পরামর্শ দেওয়া হচ্ছে। # তবে, সহযোগিতার ক্ষেত্রে, যদি প্ল্যাটফর্ম-নির্দিষ্ট নির্ভরতা বা নির্ভরতা থাকে # কোন ক্রস-প্ল্যাটফর্ম সমর্থন না থাকায়, pipenv নির্ভরশীলতা ইনস্টল করতে পারে যা কাজ করে না বা না # সমস্ত প্রয়োজনীয় নির্ভরতা ইনস্টল করুন। #কবিতা # Pipfile.lock-এর মতই, সাধারণত কবিতা.লক সংস্করণ নিয়ন্ত্রণে অন্তর্ভুক্ত করার পরামর্শ দেওয়া হয়। # এটি বিশেষ করে বাইনারি প্যাকেজগুলির জন্য প্রজননযোগ্যতা নিশ্চিত করার জন্য সুপারিশ করা হয় এবং আরও বেশি # লাইব্রেরির জন্য সাধারণত উপেক্ষা করা হয়। # https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control # PEP 582; যেমন দ্বারা ব্যবহৃত github.com/David-OConnor/pyflow # সেলারি জিনিস # SageMath পার্স করা ফাইল # পরিবেশ # স্পাইডার প্রকল্প সেটিংস # দড়ি প্রকল্প সেটিংস # mkdocs ডকুমেন্টেশন # mypy # পাইরে টাইপ চেকার # পাইটাইপ স্ট্যাটিক টাইপ বিশ্লেষক # সাইথন ডিবাগ চিহ্ন # পাইচর্ম # JetBrains নির্দিষ্ট টেমপ্লেট একটি পৃথক JetBrains.gitignore এ বজায় রাখা হয় যা করতে পারে # https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore এ পাওয়া যাবে # এবং গ্লোবাল gitignore এ যোগ করা যেতে পারে বা এই ফাইলে মার্জ করা যায়। আরো একটি পারমাণবিক জন্য # বিকল্প (প্রস্তাবিত নয়) আপনি সম্পূর্ণ ধারণা ফোল্ডার উপেক্ষা করতে নিম্নলিখিত মন্তব্য করতে পারেন। # https://www.toptal.com/developers/gitignore/api/python,django এর শেষ
translated from: English